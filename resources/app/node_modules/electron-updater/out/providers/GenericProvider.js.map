{"version":3,"sources":["../../src/providers/GenericProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEM,MAAO,eAAP,SAA+B,gBAA/B,CAAmD;AAGvD,EAAA,WAAA,CAA6B,aAA7B,EAAmF,OAAnF,EAAwG,cAAxG,EAA8I;AAC5I,UAAM,cAAN;AAD2B,SAAA,aAAA,GAAA,aAAA;AAAsD,SAAA,OAAA,GAAA,OAAA;AAFlE,SAAA,OAAA,GAAU,wBAAW,KAAK,aAAL,CAAmB,GAA9B,CAAV;AAIhB;;AAED,MAAY,OAAZ,GAAmB;AACjB,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,OAAb,IAAwB,KAAK,aAAL,CAAmB,OAA1D;AACA,WAAO,MAAM,IAAI,IAAV,GAAiB,KAAK,qBAAL,EAAjB,GAAgD,KAAK,oBAAL,CAA0B,MAA1B,CAAvD;AACD;;AAEK,EAAA,gBAAN,GAAsB;AAAA;;AAAA;AACpB,YAAM,WAAW,GAAG,gCAAmB,KAAI,CAAC,OAAxB,CAApB;AACA,YAAM,UAAU,GAAG,4BAAe,WAAf,EAA4B,KAAI,CAAC,OAAjC,EAA0C,KAAI,CAAC,OAAL,CAAa,iBAAvD,CAAnB;;AACA,WAAK,IAAI,aAAa,GAAG,CAAzB,GAA8B,aAAa,EAA3C,EAA+C;AAC7C,YAAI;AACF,iBAAO,wCAAsB,KAAI,CAAC,WAAL,CAAiB,UAAjB,CAAtB,GAAoD,WAApD,EAAiE,UAAjE,CAAP;AACD,SAFD,CAGA,OAAO,CAAP,EAAU;AACR,cAAI,CAAC,YAAY,+BAAb,IAA0B,CAAC,CAAC,UAAF,KAAiB,GAA/C,EAAoD;AAClD,kBAAM,oCAAS,wBAAwB,WAAW,kBAAkB,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,OAAO,EAAlF,EAAsF,oCAAtF,CAAN;AACD,WAFD,MAGK,IAAI,CAAC,CAAC,IAAF,KAAW,cAAf,EAA+B;AAClC,gBAAI,aAAa,GAAG,CAApB,EAAuB;AACrB,oBAAM,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACpC,oBAAI;AACF,kBAAA,UAAU,CAAC,OAAD,EAAU,OAAO,aAAjB,CAAV;AACD,iBAFD,CAGA,OAAO,CAAP,EAAU;AACR,kBAAA,MAAM,CAAC,CAAD,CAAN;AACD;AACF,eAPK,CAAN;AAQA;AACD;AACF;;AACD,gBAAM,CAAN;AACD;AACF;AA1BmB;AA2BrB;;AAED,EAAA,YAAY,CAAC,UAAD,EAAuB;AACjC,WAAO,8BAAa,UAAb,EAAyB,KAAK,OAA9B,CAAP;AACD;;AA3CsD,C","sourcesContent":["import { GenericServerOptions, HttpError, newError, UpdateInfo } from \"builder-util-runtime\"\nimport { AppUpdater } from \"../AppUpdater\"\nimport { getChannelFilename, newBaseUrl, newUrlFromBase, Provider, ResolvedUpdateFileInfo } from \"../main\"\nimport { parseUpdateInfo, ProviderRuntimeOptions, resolveFiles } from \"./Provider\"\n\nexport class GenericProvider extends Provider<UpdateInfo> {\n  private readonly baseUrl = newBaseUrl(this.configuration.url)\n\n  constructor(private readonly configuration: GenericServerOptions, private readonly updater: AppUpdater, runtimeOptions: ProviderRuntimeOptions) {\n    super(runtimeOptions)\n  }\n\n  private get channel(): string {\n    const result = this.updater.channel || this.configuration.channel\n    return result == null ? this.getDefaultChannelName() : this.getCustomChannelName(result)\n  }\n\n  async getLatestVersion(): Promise<UpdateInfo> {\n    const channelFile = getChannelFilename(this.channel)\n    const channelUrl = newUrlFromBase(channelFile, this.baseUrl, this.updater.isAddNoCacheQuery)\n    for (let attemptNumber = 0; ; attemptNumber++) {\n      try {\n        return parseUpdateInfo(await this.httpRequest(channelUrl), channelFile, channelUrl)\n      }\n      catch (e) {\n        if (e instanceof HttpError && e.statusCode === 404) {\n          throw newError(`Cannot find channel \"${channelFile}\" update info: ${e.stack || e.message}`, \"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND\")\n        }\n        else if (e.code === \"ECONNREFUSED\") {\n          if (attemptNumber < 3) {\n            await new Promise((resolve, reject) => {\n              try {\n                setTimeout(resolve, 1000 * attemptNumber)\n              }\n              catch (e) {\n                reject(e)\n              }\n            })\n            continue\n          }\n        }\n        throw e\n      }\n    }\n  }\n\n  resolveFiles(updateInfo: UpdateInfo): Array<ResolvedUpdateFileInfo> {\n    return resolveFiles(updateInfo, this.baseUrl)\n  }\n}"],"sourceRoot":""}
