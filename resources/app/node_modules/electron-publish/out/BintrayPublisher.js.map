{"version":3,"sources":["../src/BintrayPublisher.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, InvalidConfigurationError, isEmptyOrSpaces, isTokenCharValid, log, toLinuxArchString } from \"builder-util\"\nimport { BintrayOptions, configureRequestOptions, HttpError } from \"builder-util-runtime\"\nimport { BintrayClient, Version } from \"builder-util-runtime/out/bintray\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { ClientRequest, RequestOptions } from \"http\"\nimport { Lazy } from \"lazy-val\"\nimport { HttpPublisher, PublishContext, PublishOptions } from \"./publisher\"\n\nexport class BintrayPublisher extends HttpPublisher {\n  private readonly _versionPromise = new Lazy(() => this.init())\n\n  private readonly client: BintrayClient\n\n  readonly providerName = \"Bintray\"\n\n  constructor(context: PublishContext, info: BintrayOptions, private readonly version: string, private readonly options: PublishOptions = {}) {\n    super(context)\n\n    let token = info.token\n    if (isEmptyOrSpaces(token)) {\n      token = process.env.BT_TOKEN\n      if (isEmptyOrSpaces(token)) {\n        throw new InvalidConfigurationError(`Bintray token is not set, neither programmatically, nor using env \"BT_TOKEN\" (see https://www.electron.build/configuration/publish#bintrayoptions)`)\n      }\n\n      token = token.trim()\n\n      if (!isTokenCharValid(token)) {\n        throw new InvalidConfigurationError(`Bintray token (${JSON.stringify(token)}) contains invalid characters, please check env \"BT_TOKEN\"`)\n      }\n    }\n\n    this.client = new BintrayClient(info, httpExecutor, this.context.cancellationToken, token)\n  }\n\n  private async init(): Promise<Version | null> {\n    try {\n      return await this.client.getVersion(this.version)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.statusCode === 404) {\n        if (this.options.publish !== \"onTagOrDraft\") {\n          log.info({version: this.version}, \"version doesn't exist, creating one\")\n          return this.client.createVersion(this.version)\n        }\n        else {\n          log.notice({reason: \"version doesn't exist\", version: this.version}, \"skipped publishing\")\n        }\n      }\n\n      throw e\n    }\n  }\n\n  protected async doUpload(fileName: string, arch: Arch, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void) {\n    const version = await this._versionPromise.value\n    if (version == null) {\n      log.notice({file: fileName, reason: \"version doesn't exist and is not created\", version: this.version}, \"skipped publishing\")\n      return\n    }\n\n    const options: RequestOptions = {\n      hostname: \"api.bintray.com\",\n      path: `/content/${this.client.owner}/${this.client.repo}/${this.client.packageName}/${encodeURI(`${version.name}/${fileName}`)}`,\n      method: \"PUT\",\n      headers: {\n        \"Content-Length\": dataLength,\n        \"X-Bintray-Override\": \"1\",\n        \"X-Bintray-Publish\": \"1\",\n        \"X-Bintray-Debian-Architecture\": toLinuxArchString(arch)\n      }\n    }\n\n    if (this.client.distribution != null) {\n      options.headers!![\"X-Bintray-Debian-Distribution\"] = this.client.distribution\n    }\n\n    if (this.client.component != null) {\n      options.headers!![\"X-Bintray-Debian-Component\"] = this.client.component\n    }\n\n    for (let attemptNumber = 0; ; attemptNumber++) {\n      try {\n        return await httpExecutor.doApiRequest(configureRequestOptions(options, this.client.auth), this.context.cancellationToken, requestProcessor)\n      }\n      catch (e) {\n        if (attemptNumber < 3 && ((e instanceof HttpError && e.statusCode === 502) || e.code === \"EPIPE\")) {\n          continue\n        }\n\n        throw e\n      }\n    }\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async deleteRelease(isForce = false): Promise<void> {\n    if (!isForce && !this._versionPromise.hasValue) {\n      return\n    }\n\n    const version = (await this._versionPromise.value)\n    if (version != null) {\n      await this.client.deleteVersion(version.name)\n    }\n  }\n\n  toString() {\n    return `Bintray (user: ${this.client.user || this.client.owner}, owner: ${this.client.owner},  package: ${this.client.packageName}, repository: ${this.client.repo}, version: ${this.version})`\n  }\n}"],"sourceRoot":""}
