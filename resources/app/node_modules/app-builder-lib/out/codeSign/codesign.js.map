{"version":3,"sources":["../../src/codeSign/codesign.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA;SACsB,mB;;;;;;uDAAf,WAAmC,WAAnC,EAAwD,MAAxD,EAAwE,UAAxE,EAA0F;AAC/F,IAAA,WAAW,GAAG,WAAW,CAAC,IAAZ,EAAd;AAEA,QAAI,IAAI,GAAkB,IAA1B;;AACA,QAAK,WAAW,CAAC,MAAZ,GAAqB,CAArB,IAA0B,WAAW,CAAC,CAAD,CAAX,KAAmB,GAA9C,IAAsD,WAAW,CAAC,UAAZ,CAAuB,GAAvB,CAAtD,IAAqF,WAAW,CAAC,UAAZ,CAAuB,GAAvB,CAAzF,EAAsH;AACpH,MAAA,IAAI,GAAG,WAAP;AACD,KAFD,MAGK,IAAI,WAAW,CAAC,UAAZ,CAAuB,SAAvB,CAAJ,EAAuC;AAC1C,MAAA,IAAI,GAAG,WAAW,CAAC,SAAZ,CAAsB,UAAU,MAAhC,CAAP;AACD,KAFI,MAGA,IAAI,WAAW,CAAC,UAAZ,CAAuB,IAAvB,CAAJ,EAAkC;AACrC,MAAA,IAAI,GAAG,IAAI,CAAC,IAAL,CAAU,oBAAV,EAAqB,WAAW,CAAC,SAAZ,CAAsB,KAAK,MAA3B,CAArB,CAAP;AACD,KAFI,MAGA;AACH,YAAM,KAAK,GAAG,WAAW,CAAC,UAAZ,CAAuB,UAAvB,CAAd;;AACA,UAAI,KAAK,IAAI,WAAW,CAAC,MAAZ,GAAqB,IAA9B,IAAsC,WAAW,CAAC,QAAZ,CAAqB,GAArB,CAA1C,EAAqE;AACnE,cAAM,QAAQ,SAAS,MAAM,CAAC,WAAP,CAAmB;AAAC,UAAA,MAAM,EAAE;AAAT,SAAnB,CAAvB;;AACA,YAAI,KAAJ,EAAW;AACT,gBAAM,6BAAS,WAAT,EAAsB,QAAtB,CAAN;AACD,SAFD,MAGK;AACH,gBAAM,4BAAW,QAAX,EAAqB,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,QAAzB,CAArB,CAAN;AACD;;AACD,eAAO,QAAP;AACD,OATD,MAUK;AACH,QAAA,IAAI,GAAG,WAAP;AACD;AACF;;AAED,IAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,UAAb,EAAyB,IAAzB,CAAP;AACA,UAAM,IAAI,SAAS,sBAAW,IAAX,CAAnB;;AACA,QAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,YAAM,KAAI,wCAAJ,EAA8B,GAAG,IAAI,gBAArC,CAAN;AACD,KAFD,MAGK,IAAI,CAAC,IAAI,CAAC,MAAL,EAAL,EAAoB;AACvB,YAAM,KAAI,wCAAJ,EAA8B,GAAG,IAAI,aAArC,CAAN;AACD,KAFI,MAGA;AACH,aAAO,IAAP;AACD;AACF,G","sourcesContent":["import { outputFile } from \"fs-extra-p\"\nimport { homedir } from \"os\"\nimport * as path from \"path\"\nimport { TmpDir } from \"temp-file\"\nimport { InvalidConfigurationError } from \"builder-util\"\nimport { statOrNull } from \"builder-util/out/fs\"\nimport { download } from \"../binDownload\"\n\n/** @private */\nexport async function downloadCertificate(urlOrBase64: string, tmpDir: TmpDir, currentDir: string): Promise<string> {\n  urlOrBase64 = urlOrBase64.trim()\n\n  let file: string | null = null\n  if ((urlOrBase64.length > 3 && urlOrBase64[1] === \":\") || urlOrBase64.startsWith(\"/\") || urlOrBase64.startsWith(\".\")) {\n    file = urlOrBase64\n  }\n  else if (urlOrBase64.startsWith(\"file://\")) {\n    file = urlOrBase64.substring(\"file://\".length)\n  }\n  else if (urlOrBase64.startsWith(\"~/\")) {\n    file = path.join(homedir(), urlOrBase64.substring(\"~/\".length))\n  }\n  else {\n    const isUrl = urlOrBase64.startsWith(\"https://\")\n    if (isUrl || urlOrBase64.length > 2048 || urlOrBase64.endsWith(\"=\")) {\n      const tempFile = await tmpDir.getTempFile({suffix: \".p12\"})\n      if (isUrl) {\n        await download(urlOrBase64, tempFile)\n      }\n      else {\n        await outputFile(tempFile, Buffer.from(urlOrBase64, \"base64\"))\n      }\n      return tempFile\n    }\n    else {\n      file = urlOrBase64\n    }\n  }\n\n  file = path.resolve(currentDir, file)\n  const stat = await statOrNull(file)\n  if (stat == null) {\n    throw new InvalidConfigurationError(`${file} doesn't exist`)\n  }\n  else if (!stat.isFile()) {\n    throw new InvalidConfigurationError(`${file} not a file`)\n  }\n  else {\n    return file\n  }\n}"],"sourceRoot":""}
