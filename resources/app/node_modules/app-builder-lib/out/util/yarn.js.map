{"version":3,"sources":["../../src/util/yarn.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;;;SAIsB,gB;;;;;oDAAf,WAAgC,MAAhC,EAAuD,MAAvD,EAAuE,OAAvE,EAAgG,YAAA,GAAwB,KAAxH,EAA6H;AAClI,UAAM,gBAAgB,GAAA,MAAA,CAAA,MAAA,CAAA;AACpB,MAAA,eAAe,EAAE,MAAM,CAAC,2BAAP,KAAuC,IADpC;AAEpB,MAAA,cAAc,EAAE,4BAAQ,MAAM,CAAC,OAAf;AAFI,KAAA,EAEwB,OAFxB,CAAtB;;AAKA,QAAI,YAAY,IAAI,QAAQ,kBAAO,IAAI,CAAC,IAAL,CAAU,MAAV,EAAkB,cAAlB,CAAP,CAAR,CAApB,EAAwE;AACtE,YAAM,mBAAmB,CAAC,MAAD,EAAS,gBAAT,CAAzB;AACD,KAFD,MAGK;AACH,YAAM,OAAO,CAAC,MAAD,EAAS,gBAAT,CAAb;AACD;AACF,G;;;;AAOD,SAAS,sBAAT,GAA+B;AAC7B,SAAO,IAAI,CAAC,IAAL,CAAU,oBAAV,EAAqB,eAArB,CAAP;AACD;;AAEK,SAAU,SAAV,CAAoB,aAApB,EAAyD,QAAzD,EAAoF,IAApF,EAAkG,eAAlG,EAA0H;AAC9H,QAAM,aAAa,GAAG,IAAI,KAAK,QAAT,GAAoB,KAApB,GAA4B,IAAlD;AACA,QAAM,MAAM,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACP,OAAO,CAAC,GADD,EACI;AACd,IAAA,eAAe,EAAE,aADH;AAEd,IAAA,sBAAsB,EAAE,aAFV;AAGd,IAAA,mBAAmB,EAAE,QAHP;AAId,IAAA,4BAA4B,EAAE,eAJhB;AAKd;AACA,IAAA,0BAA0B,EAAE,QANd;AAOd,IAAA,wBAAwB,EAAE,IAPZ;AAQd,IAAA,4BAA4B,EAAE;AARhB,GADJ,CAAZ;;AAYA,MAAI,QAAQ,KAAK,OAAjB,EAA0B;AACxB,IAAA,MAAM,CAAC,sBAAP,GAAgC,SAAhC;AACD;;AAED,MAAI,CAAC,aAAa,CAAC,aAAnB,EAAkC;AAChC,WAAO,MAAP;AACD,GApB6H,CAsB9H;;;AACA,SAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,MADL,EACW;AACT,IAAA,kBAAkB,EAAE,mCADX;AAET,IAAA,iBAAiB,EAAE,aAAa,CAAC,OAFxB;AAGT,IAAA,kBAAkB,EAAE,UAHX;AAIT,IAAA,iBAAiB,EAAE,sBAAsB;AAJhC,GADX,CAAA;AAOD;;AAED,SAAS,mBAAT,CAA6B,MAA7B,EAA6C,OAA7C,EAAoE;AAClE,QAAM,QAAQ,GAAG,OAAO,CAAC,QAAR,IAAoB,OAAO,CAAC,QAA7C;AACA,QAAM,IAAI,GAAG,OAAO,CAAC,IAAR,IAAgB,OAAO,CAAC,IAArC;AACA,QAAM,cAAc,GAAG,OAAO,CAAC,cAA/B;;AAEA,qBAAI,IAAJ,CAAS;AAAC,IAAA,QAAD;AAAW,IAAA,IAAX;AAAiB,IAAA;AAAjB,GAAT,EAAmC,oCAAnC;;AACA,MAAI,QAAQ,GAAG,OAAO,CAAC,GAAR,CAAY,YAAZ,IAA4B,OAAO,CAAC,GAAR,CAAY,UAAvD;AACA,QAAM,QAAQ,GAAG,CAAC,SAAD,EAAY,cAAZ,CAAjB;;AAEA,MAAI,CAAC,aAAa,CAAC,QAAD,CAAlB,EAA8B;AAC5B,QAAI,OAAO,CAAC,GAAR,CAAY,gBAAZ,KAAiC,MAArC,EAA6C;AAC3C,MAAA,QAAQ,CAAC,IAAT,CAAc,gBAAd;AACD;;AACD,IAAA,QAAQ,CAAC,IAAT,CAAc,aAAd,EAA6B,WAA7B;AACD;;AAED,MAAI,QAAQ,IAAI,IAAhB,EAAsB;AACpB,IAAA,QAAQ,GAAG,kBAAkB,EAA7B;AACD,GAFD,MAGK;AACH,IAAA,QAAQ,CAAC,OAAT,CAAiB,QAAjB;AACA,IAAA,QAAQ,GAAG,OAAO,CAAC,GAAR,CAAY,iBAAZ,IAAiC,OAAO,CAAC,GAAR,CAAY,QAA7C,IAAyD,MAApE;AACD;;AAED,MAAI,cAAc,IAAI,IAAtB,EAA4B;AAC1B,IAAA,QAAQ,CAAC,IAAT,CAAc,GAAG,cAAjB;AACD;;AACD,SAAO,0BAAM,QAAN,EAAgB,QAAhB,EAA0B;AAC/B,IAAA,GAAG,EAAE,MAD0B;AAE/B,IAAA,GAAG,EAAE,SAAS,CAAC,OAAO,CAAC,aAAT,EAAwB,QAAxB,EAAkC,IAAlC,EAAwC,OAAO,CAAC,eAAR,KAA4B,IAApE;AAFiB,GAA1B,CAAP;AAID;;AAED,SAAS,kBAAT,GAA2B;AACzB,MAAI,OAAO,CAAC,GAAR,CAAY,UAAZ,KAA2B,MAA/B,EAAuC;AACrC,WAAO,OAAO,CAAC,QAAR,KAAqB,OAArB,GAA+B,UAA/B,GAA4C,MAAnD;AACD,GAFD,MAGK;AACH,WAAO,OAAO,CAAC,QAAR,KAAqB,OAArB,GAA+B,SAA/B,GAA2C,KAAlD;AACD;AACF;;AAED,SAAS,aAAT,CAAuB,QAAvB,EAA0D;AACxD,QAAM,SAAS,GAAG,OAAO,CAAC,GAAR,CAAY,qBAA9B;AACA,SAAO,OAAO,CAAC,GAAR,CAAY,UAAZ,KAA2B,MAA3B,IACJ,QAAQ,IAAI,IAAZ,IAAoB,IAAI,CAAC,QAAL,CAAc,QAAd,EAAwB,UAAxB,CAAmC,MAAnC,CADhB,IAEJ,SAAS,IAAI,IAAb,IAAqB,WAAW,IAAX,CAAgB,SAAhB,CAFxB;AAGD;AAcD;;;SACsB,O;;;;;;2CAAf,WAAuB,MAAvB,EAAuC,OAAvC,EAA8D;AACnE,UAAM,UAAU,SAAS,uBAAgB,MAAhB,QAA6B,OAAO,CAAC,cAAR,CAAwB,KAArD,GAA4D,EAAE,IAAI,kBAAO,IAAI,CAAC,IAAL,CAAU,EAAE,CAAC,IAAb,EAAmB,aAAnB,CAAP,CAAlE,EAA6G;AAAC,MAAA,WAAW,EAAE;AAAd,KAA7G,CAAzB;;AACA,QAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,yBAAI,IAAJ,CAAS,mCAAT;;AACA;AACD;;AAED,UAAM,QAAQ,GAAG,OAAO,CAAC,QAAR,IAAoB,OAAO,CAAC,QAA7C;AACA,UAAM,IAAI,GAAG,OAAO,CAAC,IAAR,IAAgB,OAAO,CAAC,IAArC;AACA,UAAM,cAAc,GAAG,OAAO,CAAC,cAA/B;;AAEA,uBAAI,IAAJ,CAAS;AAAC,MAAA,QAAD;AAAW,MAAA;AAAX,KAAT,EAA2B,2CAA3B;;AAEA,QAAI,QAAQ,GAAG,OAAO,CAAC,GAAR,CAAY,YAAZ,IAA4B,OAAO,CAAC,GAAR,CAAY,UAAvD;AACA,UAAM,MAAM,GAAG,aAAa,CAAC,QAAD,CAA5B;AACA,UAAM,QAAQ,GAAkB,EAAhC;;AACA,QAAI,QAAQ,IAAI,IAAhB,EAAsB;AACpB,MAAA,QAAQ,GAAG,kBAAkB,EAA7B;AACD,KAFD,MAGK;AACH,MAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,MAAA,QAAQ,GAAG,OAAO,CAAC,GAAR,CAAY,iBAAZ,IAAiC,OAAO,CAAC,GAAR,CAAY,QAA7C,IAAyD,MAApE;AACD;;AAED,UAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,aAAT,EAAwB,QAAxB,EAAkC,IAAlC,EAAwC,OAAO,CAAC,eAAR,KAA4B,IAApE,CAArB;;AACA,QAAI,MAAJ,EAAY;AACV,MAAA,QAAQ,CAAC,IAAT,CAAc,KAAd,EAAqB,SAArB;;AACA,UAAI,cAAc,IAAI,IAAtB,EAA4B;AAC1B,QAAA,QAAQ,CAAC,IAAT,CAAc,GAAG,cAAjB;AACD;;AACD,YAAM,uBAAgB,GAAhB,CAAoB,UAApB,EAAgC,GAAG,IAAG;AAC1C,2BAAI,IAAJ,CAAS;AAAC,UAAA,IAAI,EAAE,GAAG,CAAC;AAAX,SAAT,EAA2B,8BAA3B;;AACA,eAAO,0BAAM,QAAN,EAAiB,QAAjB,EAA2B;AAChC,UAAA,GAAG,EAAE,GAAG,CAAC,IADuB;AAEhC,UAAA;AAFgC,SAA3B,EAIJ,KAJI,CAIE,KAAK,IAAG;AACb,cAAI,GAAG,CAAC,QAAR,EAAkB;AAChB,+BAAI,IAAJ,CAAS;AAAC,cAAA,GAAG,EAAE,GAAG,CAAC;AAAV,aAAT,EAA0B,kCAA1B;AACD,WAFD,MAGK;AACH,kBAAM,KAAN;AACD;AACF,SAXI,CAAP;AAYD,OAdK,EAcH;AAAC,QAAA,WAAW,EAAE,OAAO,CAAC,QAAR,KAAqB,OAArB,GAA+B,CAA/B,GAAmC;AAAjD,OAdG,CAAN;AAeD,KApBD,MAqBK;AACH,MAAA,QAAQ,CAAC,IAAT,CAAc,SAAd;;AACA,UAAI,cAAc,IAAI,IAAtB,EAA4B;AAC1B,QAAA,QAAQ,CAAC,IAAT,CAAc,GAAG,cAAjB;AACD;;AACD,MAAA,QAAQ,CAAC,IAAT,CAAc,GAAG,UAAU,CAAC,GAAX,CAAe,EAAE,IAAI,GAAG,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAA7C,CAAjB;AACA,YAAM,0BAAM,QAAN,EAAgB,QAAhB,EAA0B;AAC9B,QAAA,GAAG,EAAE,MADyB;AAE9B,QAAA;AAF8B,OAA1B,CAAN;AAID;AACF,G","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, log, spawn } from \"builder-util\"\nimport { exists } from \"builder-util/out/fs\"\nimport { Lazy } from \"lazy-val\"\nimport { homedir } from \"os\"\nimport * as path from \"path\"\nimport { Configuration } from \"../configuration\"\nimport { Dependency } from \"./packageDependencies\"\n\nexport async function installOrRebuild(config: Configuration, appDir: string, options: RebuildOptions, forceInstall: boolean = false) {\n  const effectiveOptions = {\n    buildFromSource: config.buildDependenciesFromSource === true,\n    additionalArgs: asArray(config.npmArgs), ...options\n  }\n\n  if (forceInstall || !(await exists(path.join(appDir, \"node_modules\")))) {\n    await installDependencies(appDir, effectiveOptions)\n  }\n  else {\n    await rebuild(appDir, effectiveOptions)\n  }\n}\n\nexport interface DesktopFrameworkInfo {\n  version: string\n  useCustomDist: boolean\n}\n\nfunction getElectronGypCacheDir() {\n  return path.join(homedir(), \".electron-gyp\")\n}\n\nexport function getGypEnv(frameworkInfo: DesktopFrameworkInfo, platform: NodeJS.Platform, arch: string, buildFromSource: boolean) {\n  const npmConfigArch = arch === \"armv7l\" ? \"arm\" : arch\n  const common: any = {\n    ...process.env,\n    npm_config_arch: npmConfigArch,\n    npm_config_target_arch: npmConfigArch,\n    npm_config_platform: platform,\n    npm_config_build_from_source: buildFromSource,\n    // required for node-pre-gyp\n    npm_config_target_platform: platform,\n    npm_config_update_binary: true,\n    npm_config_fallback_to_build: true,\n  }\n\n  if (platform === \"win32\") {\n    common.npm_config_target_libc = \"unknown\"\n  }\n\n  if (!frameworkInfo.useCustomDist) {\n    return common\n  }\n\n  // https://github.com/nodejs/node-gyp/issues/21\n  return {\n    ...common,\n    npm_config_disturl: \"https://atom.io/download/electron\",\n    npm_config_target: frameworkInfo.version,\n    npm_config_runtime: \"electron\",\n    npm_config_devdir: getElectronGypCacheDir(),\n  }\n}\n\nfunction installDependencies(appDir: string, options: RebuildOptions): Promise<any> {\n  const platform = options.platform || process.platform\n  const arch = options.arch || process.arch\n  const additionalArgs = options.additionalArgs\n\n  log.info({platform, arch, appDir}, `installing production dependencies`)\n  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const execArgs = [\"install\", \"--production\"]\n\n  if (!isRunningYarn(execPath)) {\n    if (process.env.NPM_NO_BIN_LINKS === \"true\") {\n      execArgs.push(\"--no-bin-links\")\n    }\n    execArgs.push(\"--cache-min\", \"999999999\")\n  }\n\n  if (execPath == null) {\n    execPath = getPackageToolPath()\n  }\n  else {\n    execArgs.unshift(execPath)\n    execPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  if (additionalArgs != null) {\n    execArgs.push(...additionalArgs)\n  }\n  return spawn(execPath, execArgs, {\n    cwd: appDir,\n    env: getGypEnv(options.frameworkInfo, platform, arch, options.buildFromSource === true),\n  })\n}\n\nfunction getPackageToolPath() {\n  if (process.env.FORCE_YARN === \"true\") {\n    return process.platform === \"win32\" ? \"yarn.cmd\" : \"yarn\"\n  }\n  else {\n    return process.platform === \"win32\" ? \"npm.cmd\" : \"npm\"\n  }\n}\n\nfunction isRunningYarn(execPath: string | null | undefined) {\n  const userAgent = process.env.npm_config_user_agent\n  return process.env.FORCE_YARN === \"true\" ||\n    (execPath != null && path.basename(execPath).startsWith(\"yarn\")) ||\n    (userAgent != null && /\\byarn\\b/.test(userAgent))\n}\n\nexport interface RebuildOptions {\n  frameworkInfo: DesktopFrameworkInfo\n  productionDeps?: Lazy<Array<Dependency>>\n\n  platform?: NodeJS.Platform\n  arch?: string\n\n  buildFromSource?: boolean\n\n  additionalArgs?: Array<string> | null\n}\n\n/** @internal */\nexport async function rebuild(appDir: string, options: RebuildOptions) {\n  const nativeDeps = await BluebirdPromise.filter(await options.productionDeps!.value, it => exists(path.join(it.path, \"binding.gyp\")), {concurrency: 8})\n  if (nativeDeps.length === 0) {\n    log.info(\"no native production dependencies\")\n    return\n  }\n\n  const platform = options.platform || process.platform\n  const arch = options.arch || process.arch\n  const additionalArgs = options.additionalArgs\n\n  log.info({platform, arch}, \"rebuilding native production dependencies\")\n\n  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const isYarn = isRunningYarn(execPath)\n  const execArgs: Array<string> = []\n  if (execPath == null) {\n    execPath = getPackageToolPath()\n  }\n  else {\n    execArgs.push(execPath)\n    execPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  const env = getGypEnv(options.frameworkInfo, platform, arch, options.buildFromSource === true)\n  if (isYarn) {\n    execArgs.push(\"run\", \"install\")\n    if (additionalArgs != null) {\n      execArgs.push(...additionalArgs)\n    }\n    await BluebirdPromise.map(nativeDeps, dep => {\n      log.info({name: dep.name}, `rebuilding native dependency`)\n      return spawn(execPath!, execArgs, {\n        cwd: dep.path,\n        env,\n      })\n        .catch(error => {\n          if (dep.optional) {\n            log.warn({dep: dep.name}, \"cannot build optional native dep\")\n          }\n          else {\n            throw error\n          }\n        })\n    }, {concurrency: process.platform === \"win32\" ? 1 : 2})\n  }\n  else {\n    execArgs.push(\"rebuild\")\n    if (additionalArgs != null) {\n      execArgs.push(...additionalArgs)\n    }\n    execArgs.push(...nativeDeps.map(it => `${it.name}@${it.version}`))\n    await spawn(execPath, execArgs, {\n      cwd: appDir,\n      env,\n    })\n  }\n}\n"],"sourceRoot":""}
