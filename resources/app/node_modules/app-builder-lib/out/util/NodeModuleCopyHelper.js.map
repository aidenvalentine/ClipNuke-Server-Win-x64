{"version":3,"sources":["../../src/util/NodeModuleCopyHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { CONCURRENCY } from \"builder-util/out/fs\"\nimport { lstat, readdir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { excludedNames, FileMatcher } from \"../fileMatcher\"\nimport { Packager } from \"../packager\"\nimport { resolveFunction } from \"../platformPackager\"\nimport { FileCopyHelper } from \"./AppFileWalker\"\n\nconst excludedFiles = new Set([\".DS_Store\", \"node_modules\" /* already in the queue */, \"CHANGELOG.md\", \"ChangeLog\", \"changelog.md\", \"binding.gyp\", \".npmignore\"].concat(excludedNames.split(\",\")))\nconst topLevelExcludedFiles = new Set([\"test.js\", \"karma.conf.js\", \".coveralls.yml\", \"README.md\", \"readme.markdown\", \"README\", \"readme.md\", \"readme\", \"test\", \"__tests__\", \"tests\", \"powered-test\", \"example\", \"examples\", \".bin\"])\n\n/** @internal */\nexport class NodeModuleCopyHelper extends FileCopyHelper {\n  constructor(matcher: FileMatcher, packager: Packager) {\n    super(matcher, matcher.isEmpty() ? null : matcher.createFilter(), packager)\n  }\n\n  async collectNodeModules(baseDir: string, moduleNames: Iterable<string>, nodeModuleExcludedExts: Array<string>): Promise<Array<string>> {\n    const filter = this.filter\n    const metadata = this.metadata\n\n    const onNodeModuleFile = resolveFunction(this.packager.config.onNodeModuleFile, \"onNodeModuleFile\")\n\n    const result: Array<string> = []\n    const queue: Array<string> = []\n    for (const moduleName of moduleNames) {\n      const tmpPath = baseDir + path.sep + moduleName\n      queue.length = 1\n      // The path should be corrected in Windows that when the moduleName is Scoped packages named.\n      const depPath = path.normalize(tmpPath)\n      queue[0] = depPath\n\n      while (queue.length > 0) {\n        const dirPath = queue.pop()!\n\n        const childNames = await readdir(dirPath)\n        childNames.sort()\n\n        const isTopLevel = dirPath === depPath\n        const dirs: Array<string> = []\n        // our handler is async, but we should add sorted files, so, we add file to result not in the mapper, but after map\n        const sortedFilePaths = await BluebirdPromise.map(childNames, name => {\n          if (onNodeModuleFile != null) {\n            onNodeModuleFile(dirPath + path.sep + name)\n          }\n\n          if (excludedFiles.has(name) || name.startsWith(\"._\")) {\n            return null\n          }\n\n          for (const ext of nodeModuleExcludedExts) {\n            if (name.endsWith(ext)) {\n              return null\n            }\n          }\n\n          // noinspection SpellCheckingInspection\n          if (isTopLevel && (topLevelExcludedFiles.has(name) || (moduleName === \"libui-node\" && (name === \"build\" || name === \"docs\" || name === \"src\")))) {\n            return null\n          }\n\n          if (dirPath.endsWith(\"build\")) {\n            if (name === \"gyp-mac-tool\" || name === \"Makefile\" || name.endsWith(\".mk\") || name.endsWith(\".gypi\") || name.endsWith(\".Makefile\")) {\n              return null\n            }\n          }\n          else if (dirPath.endsWith(\"Release\") && (name === \".deps\" || name === \"obj.target\")) {\n            return null\n          }\n          else if (name === \"src\" && (dirPath.endsWith(\"keytar\") || dirPath.endsWith(\"keytar-prebuild\"))) {\n            return null\n          }\n          else if (dirPath.endsWith(\"lzma-native\") && (name === \"build\" || name === \"deps\")) {\n            return null\n          }\n\n          const filePath = dirPath + path.sep + name\n          return lstat(filePath)\n            .then(stat => {\n              if (filter != null && !filter(filePath, stat)) {\n                return null\n              }\n\n              if (!stat.isDirectory()) {\n                metadata.set(filePath, stat)\n              }\n              const consumerResult = this.handleFile(filePath, dirPath, stat)\n              if (consumerResult == null) {\n                if (stat.isDirectory()) {\n                  dirs.push(name)\n                  return null\n                }\n                else {\n                  return filePath\n                }\n              }\n              else {\n                return consumerResult\n                  .then(it => {\n                    // asarUtil can return modified stat (symlink handling)\n                    if ((it == null ? stat : it).isDirectory()) {\n                      dirs.push(name)\n                      return null\n                    }\n                    else {\n                      return filePath\n                    }\n                  })\n              }\n            })\n        }, CONCURRENCY)\n\n        for (const child of sortedFilePaths) {\n          if (child != null) {\n            result.push(child)\n          }\n        }\n\n        dirs.sort()\n        for (const child of dirs) {\n          queue.push(dirPath + path.sep + child)\n        }\n      }\n    }\n    return result\n  }\n}"],"sourceRoot":""}
