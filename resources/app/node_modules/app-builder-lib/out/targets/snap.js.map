{"version":3,"sources":["../../src/targets/snap.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, executeAppBuilder, replaceDefault as _replaceDefault, serializeToYaml, toLinuxArchString } from \"builder-util\"\nimport { asArray } from \"builder-util-runtime\"\nimport { outputFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { SnapOptions } from \"..\"\nimport { Target } from \"../core\"\nimport { LinuxPackager, toAppImageOrSnapArch } from \"../linuxPackager\"\nimport { PlugDescriptor } from \"../options/SnapOptions\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { createStageDirPath } from \"./targetUtil\"\n\n// libxss1, libasound2, gconf2 - was \"error while loading shared libraries: libXss.so.1\" on Xubuntu 16.04\n// noinspection SpellCheckingInspection\nconst defaultStagePackages = [\"libasound2\", \"libgconf2-4\", \"libnotify4\", \"libnspr4\", \"libnss3\", \"libpcre3\", \"libpulse0\", \"libxss1\", \"libxtst6\", \"libappindicator1\", \"libsecret-1-0\"]\nconst defaultPlugs = [\"desktop\", \"desktop-legacy\", \"home\", \"x11\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"pulseaudio\", \"opengl\"]\n\nexport default class SnapTarget extends Target {\n  readonly options: SnapOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n\n  public isUseTemplateApp = false\n\n  constructor(name: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(name)\n  }\n\n  private replaceDefault(inList: Array<string> | null | undefined, defaultList: Array<string>) {\n    const result = _replaceDefault(inList, defaultList)\n    if (result !== defaultList) {\n      this.isUseTemplateApp = false\n    }\n    return result\n  }\n\n  private get isElectron2(): boolean {\n    return semver.gte(this.packager.config.electronVersion || \"1.8.3\", \"2.0.0-beta.1\")\n  }\n\n  private createDescriptor(arch: Arch): any {\n    const appInfo = this.packager.appInfo\n    const snapName = this.packager.executableName.toLowerCase()\n    const options = this.options\n    const linuxArchName = toAppImageOrSnapArch(arch)\n\n    const plugs = normalizePlugConfiguration(options.plugs)\n    const plugNames = this.replaceDefault(plugs == null ? null : Object.getOwnPropertyNames(plugs), defaultPlugs)\n    const desktopPart = this.isElectron2 ? \"desktop-gtk3\" : \"desktop-gtk2\"\n\n    const buildPackages = asArray(options.buildPackages)\n    this.isUseTemplateApp = this.options.useTemplateApp !== false && arch === Arch.x64 && buildPackages.length === 0 && this.isElectron2\n\n    const appDescriptor: any = {\n      command: `command.sh`,\n      plugs: plugNames,\n    }\n    const snap: any = {\n      name: snapName,\n      version: appInfo.version,\n      summary: options.summary || appInfo.productName,\n      description: this.helper.getDescription(options),\n      confinement: options.confinement || \"strict\",\n      grade: options.grade || \"stable\",\n      architectures: [toLinuxArchString(arch)],\n      apps: {\n        [snapName]: appDescriptor\n      },\n      parts: {\n        app: {\n          plugin: \"nil\",\n          \"stage-packages\": this.replaceDefault(options.stagePackages, defaultStagePackages),\n          after: this.replaceDefault(options.after, [desktopPart]),\n        }\n      },\n    }\n\n    if (options.confinement !== \"classic\") {\n      appDescriptor.environment = {\n        TMPDIR: \"$XDG_RUNTIME_DIR\",\n        PATH: \"$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH\",\n        LD_LIBRARY_PATH: [\n          \"$SNAP_LIBRARY_PATH\",\n          \"$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu:$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu/pulseaudio\",\n          \"$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu/mesa-egl\",\n          \"$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/\" + linuxArchName + \"-linux-gnu:$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu\",\n          \"$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib\",\n          \"$SNAP/lib/\" + linuxArchName + \"-linux-gnu:$SNAP/usr/lib/\" + linuxArchName + \"-linux-gnu\"\n        ].join(\":\"),\n        ...options.environment,\n      }\n    }\n\n    if (!this.isUseTemplateApp) {\n      appDescriptor.adapter = \"none\"\n    }\n\n    if (buildPackages.length > 0) {\n      snap.parts.app[\"build-packages\"] = buildPackages\n    }\n\n    if (plugs != null) {\n      for (const plugName of plugNames) {\n        const plugOptions = plugs[plugName]\n        if (plugOptions == null) {\n          continue\n        }\n\n        if (snap.plugs == null) {\n          snap.plugs = {}\n        }\n        snap.plugs[plugName] = plugOptions\n      }\n    }\n\n    if (options.assumes != null) {\n      snap.assumes = asArray(options.assumes)\n    }\n\n    if (!this.isUseTemplateApp && snap.parts.app.after.includes(desktopPart)) {\n      // call super build (snapcraftctl build) otherwise /bin/desktop not created\n      // noinspection SpellCheckingInspection\n      const desktopPartOverride: any = {\n        \"override-build\": `set -x\nsnapcraftctl build\nexport XDG_DATA_DIRS=$SNAPCRAFT_PART_INSTALL/usr/share\nupdate-mime-database $SNAPCRAFT_PART_INSTALL/usr/share/mime\n\nfor dir in $SNAPCRAFT_PART_INSTALL/usr/share/icons/*/; do\n  if [ -f $dir/index.theme ]; then\n    if which gtk-update-icon-cache-3.0 &> /dev/null; then\n      gtk-update-icon-cache-3.0 -q $dir\n    elif which gtk-update-icon-cache &> /dev/null; then\n      gtk-update-icon-cache -q $dir\n    fi\n  fi\ndone`\n      }\n\n      if (appDescriptor.plugs.includes(\"desktop\") || appDescriptor.plugs.includes(\"desktop-legacy\")) {\n        desktopPartOverride.stage = [\"-./usr/share/fonts/**\"]\n      }\n\n      snap.parts[desktopPart] = desktopPartOverride\n    }\n\n    return snap\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const options = this.options\n    // tslint:disable-next-line:no-invalid-template-strings\n    const artifactName = packager.expandArtifactNamePattern(this.options, \"snap\", arch, \"${name}_${version}_${arch}.${ext}\", false)\n    const artifactPath = path.join(this.outDir, artifactName)\n    await packager.info.callArtifactBuildStarted({\n      targetPresentableName: \"snap\",\n      file: artifactPath,\n      arch,\n    })\n\n    const snap: any = this.createDescriptor(arch)\n    if (this.isUseTemplateApp) {\n      delete snap.parts\n    }\n\n    const stageDir = await createStageDirPath(this, packager, arch)\n    // snapcraft.yaml inside a snap directory\n    const snapMetaDir = path.join(stageDir, this.isUseTemplateApp ? \"meta\" : \"snap\")\n\n    const args = [\n      \"snap\",\n      \"--app\", appOutDir,\n      \"--stage\", stageDir,\n      \"--arch\", toLinuxArchString(arch),\n      \"--output\", artifactPath,\n      \"--executable\", this.packager.executableName,\n      \"--docker-image\", \"electronuserland/builder:latest\",\n    ]\n\n    await this.helper.icons\n    if (this.helper.maxIconPath != null) {\n      if (!this.isUseTemplateApp) {\n        snap.icon = \"snap/gui/icon.png\"\n      }\n      args.push(\"--icon\", this.helper.maxIconPath)\n    }\n\n    const desktopFile = path.join(snapMetaDir, \"gui\", `${snap.name}.desktop`)\n    await this.helper.writeDesktopEntry(this.options, packager.executableName, desktopFile, {\n      // tslint:disable:no-invalid-template-strings\n      Icon: \"${SNAP}/meta/gui/icon.png\"\n    })\n\n    if (packager.packagerOptions.effectiveOptionComputed != null && await packager.packagerOptions.effectiveOptionComputed({snap, desktopFile})) {\n      return\n    }\n\n    await outputFile(path.join(snapMetaDir, this.isUseTemplateApp ? \"snap.yaml\" : \"snapcraft.yaml\"), serializeToYaml(snap))\n\n    const hooksDir = await packager.getResource(options.hooks, \"snap-hooks\")\n    if (hooksDir != null) {\n      args.push(\"--hooks\", hooksDir)\n    }\n\n    if (this.isUseTemplateApp) {\n      args.push(\"--template-url\", \"electron2\")\n    }\n    await executeAppBuilder(args)\n    await packager.dispatchArtifactCreated(artifactPath, this, arch, packager.computeSafeArtifactName(artifactName, \"snap\", arch, false))\n  }\n}\n\nfunction normalizePlugConfiguration(raw: Array<string | PlugDescriptor> | PlugDescriptor | null | undefined): { [key: string]: PlugDescriptor | null } | null {\n  if (raw == null) {\n    return null\n  }\n\n  const result: any = {}\n  for (const item of (Array.isArray(raw) ? raw : [raw])) {\n    if (typeof item === \"string\") {\n      result[item] = null\n    }\n    else {\n      Object.assign(result, item)\n    }\n  }\n  return result\n}\n"],"sourceRoot":""}
