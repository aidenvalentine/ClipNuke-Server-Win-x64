{"version":3,"sources":["../../src/targets/ArchiveTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch } from \"builder-util\"\nimport * as path from \"path\"\nimport { Platform, Target, TargetSpecificOptions } from \"../core\"\nimport { copyFiles, getFileMatchers } from \"../fileMatcher\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { archive, tar } from \"./archive\"\nimport { appendBlockmap } from \"./differentialUpdateInfoBuilder\"\n\nexport class ArchiveTarget extends Target {\n  readonly options: TargetSpecificOptions = (this.packager.config as any)[this.name]\n\n  constructor(name: string, readonly outDir: string, private readonly packager: PlatformPackager<any>, private readonly isWriteUpdateInfo = false) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const isMac = packager.platform === Platform.MAC\n    const format = this.name\n\n    let defaultPattern: string\n    if (packager.platform === Platform.LINUX) {\n      // tslint:disable-next-line:no-invalid-template-strings\n      defaultPattern = \"${name}-${version}\" + (arch === Arch.x64 ? \"\" : \"-${arch}\") + \".${ext}\"\n    }\n    else {\n      // tslint:disable-next-line:no-invalid-template-strings\n      defaultPattern = \"${productName}-${version}\" + (arch === Arch.x64 ? \"\" : \"-${arch}\") + \"-${os}.${ext}\"\n    }\n\n    const artifactName = packager.expandArtifactNamePattern(this.options, format, arch, defaultPattern, false)\n    const artifactPath = path.join(this.outDir, artifactName)\n\n    await packager.info.callArtifactBuildStarted({\n      targetPresentableName: `${isMac ? \"macOS \" : \"\"}${format}`,\n      file: artifactPath,\n      arch,\n    })\n    let updateInfo: any = null\n    if (format.startsWith(\"tar.\")) {\n      await tar(packager.compression, format, artifactPath, appOutDir, isMac, packager.info.tempDirManager)\n    }\n    else {\n      let withoutDir = !isMac\n      let dirToArchive = appOutDir\n      if (isMac) {\n        dirToArchive = path.dirname(appOutDir)\n        const fileMatchers = getFileMatchers(packager.config, \"extraDistFiles\", dirToArchive, packager.createGetFileMatchersOptions(this.outDir, arch, packager.platformSpecificBuildOptions))\n        if (fileMatchers == null) {\n          dirToArchive = appOutDir\n        }\n        else {\n          await copyFiles(fileMatchers, null, true)\n          withoutDir = true\n        }\n      }\n\n      const archiveOptions = {\n        compression: packager.compression,\n        withoutDir,\n      }\n      await archive(format, artifactPath, dirToArchive, archiveOptions)\n\n      if (this.isWriteUpdateInfo && format === \"zip\") {\n        updateInfo = await appendBlockmap(artifactPath)\n      }\n    }\n\n    await packager.info.callArtifactBuildCompleted({\n      updateInfo,\n      file: artifactPath,\n      // tslint:disable-next-line:no-invalid-template-strings\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, format, arch, false, defaultPattern.replace(\"${productName}\", \"${name}\")),\n      target: this,\n      arch,\n      packager,\n      isWriteUpdateInfo: this.isWriteUpdateInfo,\n    })\n  }\n}"],"sourceRoot":""}
