{"version":3,"sources":["../../src/targets/AppxTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, asArray, deepAssign, InvalidConfigurationError, log } from \"builder-util\"\nimport { copyOrLinkFile, walk } from \"builder-util/out/fs\"\nimport { emptyDir, readdir, readFile, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AppXOptions } from \"../\"\nimport { getSignVendorPath, isOldWin6 } from \"../codeSign/windowsCodeSign\"\nimport { Target } from \"../core\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { VmManager } from \"../vm/vm\"\nimport { WinPackager } from \"../winPackager\"\nimport { createStageDir } from \"./targetUtil\"\n\nconst APPX_ASSETS_DIR_NAME = \"appx\"\n\nconst vendorAssetsForDefaultAssets: { [key: string]: string; } = {\n  \"StoreLogo.png\": \"SampleAppx.50x50.png\",\n  \"Square150x150Logo.png\": \"SampleAppx.150x150.png\",\n  \"Square44x44Logo.png\": \"SampleAppx.44x44.png\",\n  \"Wide310x150Logo.png\": \"SampleAppx.310x150.png\",\n}\n\nconst DEFAULT_RESOURCE_LANG = \"en-US\"\n\nexport default class AppXTarget extends Target {\n  readonly options: AppXOptions = deepAssign({}, this.packager.platformSpecificBuildOptions, this.packager.config.appx)\n\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\n    super(\"appx\")\n\n    if (process.platform !== \"darwin\" && (process.platform !== \"win32\" || isOldWin6())) {\n      throw new Error(\"AppX is supported only on Windows 10 or Windows Server 2012 R2 (version number 6.3+)\")\n    }\n  }\n\n  // https://docs.microsoft.com/en-us/windows/uwp/packaging/create-app-package-with-makeappx-tool#mapping-files\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const artifactName = packager.expandArtifactBeautyNamePattern(this.options, \"appx\", arch)\n    const artifactPath = path.join(this.outDir, artifactName)\n    await packager.info.callArtifactBuildStarted({\n      targetPresentableName: \"AppX\",\n      file: artifactPath,\n      arch,\n    })\n\n    const vendorPath = await getSignVendorPath()\n    const vm = await packager.vm.value\n\n    const stageDir = await createStageDir(this, packager, arch)\n\n    const mappingFile = stageDir.getTempFile(\"mapping.txt\")\n    const makeAppXArgs = [\"pack\", \"/o\" /* overwrite the output file if it exists */,\n      \"/f\", vm.toVmFile(mappingFile),\n      \"/p\", vm.toVmFile(artifactPath),\n    ]\n    if (packager.compression === \"store\") {\n      makeAppXArgs.push(\"/nc\")\n    }\n\n    const mappingList: Array<Array<string>> = []\n    mappingList.push(await BluebirdPromise.map(walk(appOutDir), file => {\n      let appxPath = file.substring(appOutDir.length + 1)\n      if (path.sep !== \"\\\\\") {\n        appxPath = appxPath.replace(/\\//g, \"\\\\\")\n      }\n      return `\"${vm.toVmFile(file)}\" \"app\\\\${appxPath}\"`\n    }))\n\n    const userAssetDir = await this.packager.getResource(undefined, APPX_ASSETS_DIR_NAME)\n    const assetInfo = await AppXTarget.computeUserAssets(vm, vendorPath, userAssetDir)\n    const userAssets = assetInfo.userAssets\n\n    const manifestFile = stageDir.getTempFile(\"AppxManifest.xml\")\n    await this.writeManifest(manifestFile, arch, await this.computePublisherName(), userAssets)\n    mappingList.push(assetInfo.mappings)\n    mappingList.push([`\"${vm.toVmFile(manifestFile)}\" \"AppxManifest.xml\"`])\n\n    if (isScaledAssetsProvided(userAssets)) {\n      const outFile = vm.toVmFile(stageDir.getTempFile(\"resources.pri\"))\n      const makePriPath = vm.toVmFile(path.join(vendorPath, \"windows-10\", Arch[arch], \"makepri.exe\"))\n\n      const assetRoot = stageDir.getTempFile(\"appx/assets\")\n      await emptyDir(assetRoot)\n      await BluebirdPromise.map(assetInfo.allAssets, it => copyOrLinkFile(it, path.join(assetRoot, path.basename(it))))\n\n      await vm.exec(makePriPath, [\"new\",\n        \"/Overwrite\",\n        \"/Manifest\", vm.toVmFile(manifestFile),\n        \"/ProjectRoot\", vm.toVmFile(path.dirname(assetRoot)),\n        \"/ConfigXml\", vm.toVmFile(path.join(getTemplatePath(\"appx\"), \"priconfig.xml\")),\n        \"/OutputFile\", outFile,\n      ])\n\n      // in addition to resources.pri, resources.scale-140.pri and other such files will be generated\n      for (const resourceFile of (await readdir(stageDir.dir)).filter(it => it.startsWith(\"resources.\")).sort()) {\n        mappingList.push([`\"${vm.toVmFile(stageDir.getTempFile(resourceFile))}\" \"${resourceFile}\"`])\n      }\n      makeAppXArgs.push(\"/l\")\n    }\n\n    let mapping = \"[Files]\"\n    for (const list of mappingList) {\n      mapping += \"\\r\\n\" + list.join(\"\\r\\n\")\n    }\n    await writeFile(mappingFile, mapping)\n    packager.debugLogger.add(\"appx.mapping\", mapping)\n\n    if (this.options.makeappxArgs != null) {\n      makeAppXArgs.push(...this.options.makeappxArgs)\n    }\n    await vm.exec(vm.toVmFile(path.join(vendorPath, \"windows-10\", Arch[arch], \"makeappx.exe\")), makeAppXArgs)\n    await packager.sign(artifactPath)\n\n    await stageDir.cleanup()\n\n    await packager.info.callArtifactBuildCompleted({\n      file: artifactPath,\n      packager,\n      arch,\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"appx\"),\n      target: this,\n      isWriteUpdateInfo: this.options.electronUpdaterAware,\n    })\n  }\n\n  private static async computeUserAssets(vm: VmManager, vendorPath: string, userAssetDir: string | null) {\n    const mappings: Array<string> = []\n    let userAssets: Array<string>\n    const allAssets: Array<string> = []\n    if (userAssetDir == null) {\n      userAssets = []\n    }\n    else {\n      userAssets = (await readdir(userAssetDir)).filter(it => !it.startsWith(\".\") && !it.endsWith(\".db\") && it.includes(\".\"))\n      for (const name of userAssets) {\n        mappings.push(`\"${vm.toVmFile(userAssetDir)}${vm.pathSep}${name}\" \"assets\\\\${name}\"`)\n        allAssets.push(path.join(userAssetDir, name))\n      }\n    }\n\n    for (const defaultAsset of Object.keys(vendorAssetsForDefaultAssets)) {\n      if (userAssets.length === 0 || !isDefaultAssetIncluded(userAssets, defaultAsset)) {\n        const file = path.join(vendorPath, \"appxAssets\", vendorAssetsForDefaultAssets[defaultAsset])\n        mappings.push(`\"${vm.toVmFile(file)}\" \"assets\\\\${defaultAsset}\"`)\n        allAssets.push(file)\n      }\n    }\n\n    // we do not use process.arch to build path to tools, because even if you are on x64, ia32 appx tool must be used if you build appx for ia32\n    return {userAssets, mappings, allAssets}\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/2108#issuecomment-333200711\n  private async computePublisherName() {\n    if (await this.packager.cscInfo.value == null) {\n      log.info({reason: \"Windows Store only build\"}, \"AppX is not signed\")\n      return this.options.publisher || \"CN=ms\"\n    }\n\n    const certInfo = await this.packager.lazyCertInfo.value\n    const publisher = certInfo == null ? null : certInfo.bloodyMicrosoftSubjectDn\n    if (publisher == null) {\n      throw new Error(\"Internal error: cannot compute subject using certificate info\")\n    }\n    return publisher\n  }\n\n  private async writeManifest(outFile: string, arch: Arch, publisher: string, userAssets: Array<string>) {\n    const appInfo = this.packager.appInfo\n    const options = this.options\n    const executable = `app\\\\${appInfo.productFilename}.exe`\n    const displayName = options.displayName || appInfo.productName\n    const manifest = (await readFile(path.join(getTemplatePath(\"appx\"), \"appxmanifest.xml\"), \"utf8\"))\n      .replace(/\\${([a-zA-Z0-9]+)}/g, (match, p1): string => {\n        switch (p1) {\n          case \"publisher\":\n            return publisher\n\n          case \"publisherDisplayName\":\n            const name = options.publisherDisplayName || appInfo.companyName\n            if (name == null) {\n              throw new InvalidConfigurationError(`Please specify \"author\" in the application package.json — it is required because \"appx.publisherDisplayName\" is not set.`)\n            }\n            return name\n\n          case \"version\":\n            return appInfo.getVersionInWeirdWindowsForm(false)\n\n          case \"applicationId\":\n            const result = options.applicationId || options.identityName || appInfo.name\n            if (!isNaN(parseInt(result[0], 10))) {\n              let message = `AppX Application.Id can’t start with numbers: \"${result}\"`\n              if (options.applicationId == null) {\n                message += `\\nPlease set appx.applicationId (or correct appx.identityName or name)`\n              }\n              throw new InvalidConfigurationError(message)\n            }\n            return result\n\n          case \"identityName\":\n            return options.identityName  || appInfo.name\n\n          case \"executable\":\n            return executable\n\n          case \"displayName\":\n            return displayName\n\n          case \"description\":\n            return appInfo.description || appInfo.productName\n\n          case \"backgroundColor\":\n            return options.backgroundColor || \"#464646\"\n\n          case \"logo\":\n            return \"assets\\\\StoreLogo.png\"\n\n          case \"square150x150Logo\":\n            return \"assets\\\\Square150x150Logo.png\"\n\n          case \"square44x44Logo\":\n            return \"assets\\\\Square44x44Logo.png\"\n\n          case \"lockScreen\":\n            return lockScreenTag(userAssets)\n\n          case \"defaultTile\":\n            return defaultTileTag(userAssets)\n\n          case \"splashScreen\":\n            return splashScreenTag(userAssets)\n\n          case \"arch\":\n            return arch === Arch.ia32 ? \"x86\" : \"x64\"\n\n          case \"resourceLanguages\":\n            return resourceLanguageTag(asArray(options.languages))\n\n          case \"extensions\":\n            return this.getExtensions(executable, displayName)\n\n          default:\n            throw new Error(`Macro ${p1} is not defined`)\n        }\n      })\n    await writeFile(outFile, manifest)\n  }\n\n  private getExtensions(executable: string, displayName: string): string {\n    const uriSchemes = asArray(this.packager.config.protocols)\n      .concat(asArray(this.packager.platformSpecificBuildOptions.protocols))\n\n    let isAddAutoLaunchExtension = this.options.addAutoLaunchExtension\n    if (isAddAutoLaunchExtension === undefined) {\n      const deps = this.packager.info.metadata.dependencies\n      isAddAutoLaunchExtension = deps != null && deps[\"electron-winstore-auto-launch\"] != null\n    }\n\n    if (!isAddAutoLaunchExtension && uriSchemes.length === 0) {\n      return \"\"\n    }\n\n    let extensions = \"<Extensions>\"\n\n    if (isAddAutoLaunchExtension) {\n      extensions += `\n        <desktop:Extension Category=\"windows.startupTask\" Executable=\"${executable}\" EntryPoint=\"Windows.FullTrustApplication\">\n          <desktop:StartupTask TaskId=\"SlackStartup\" Enabled=\"true\" DisplayName=\"${displayName}\" />\n        </desktop:Extension>`\n    }\n\n    for (const protocol of uriSchemes) {\n      for (const scheme of asArray(protocol.schemes)) {\n        extensions += `\n          <uap:Extension Category=\"windows.protocol\">\n            <uap:Protocol Name=\"${scheme}\">\n               <uap:DisplayName>${protocol.name}</uap:DisplayName>\n             </uap:Protocol>\n          </uap:Extension>`\n      }\n    }\n\n    extensions += \"</Extensions>\"\n    return extensions\n  }\n}\n\n// get the resource - language tag, see https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest\nfunction resourceLanguageTag(userLanguages: Array<string> | null | undefined): string {\n  if (userLanguages == null || userLanguages.length === 0) {\n    userLanguages = [DEFAULT_RESOURCE_LANG]\n  }\n  return userLanguages.map(it => `<Resource Language=\"${it.replace(/_/g, \"-\")}\" />`).join(\"\\n\")\n}\n\nfunction lockScreenTag(userAssets: Array<string>): string {\n  if (isDefaultAssetIncluded(userAssets, \"BadgeLogo.png\")) {\n    return '<uap:LockScreen Notification=\"badgeAndTileText\" BadgeLogo=\"assets\\\\BadgeLogo.png\" />'\n  }\n  else {\n    return \"\"\n  }\n}\n\nfunction defaultTileTag(userAssets: Array<string>): string {\n  const defaultTiles: Array<string> = [\"<uap:DefaultTile\", 'Wide310x150Logo=\"assets\\\\Wide310x150Logo.png\"']\n\n  if (isDefaultAssetIncluded(userAssets, \"LargeTile.png\")) {\n    defaultTiles.push('Square310x310Logo=\"assets\\\\LargeTile.png\"')\n  }\n  if (isDefaultAssetIncluded(userAssets, \"SmallTile.png\")) {\n    defaultTiles.push('Square71x71Logo=\"assets\\\\SmallTile.png\"')\n  }\n\n  defaultTiles.push(\"/>\")\n  return defaultTiles.join(\" \")\n}\n\nfunction splashScreenTag(userAssets: Array<string>): string {\n  if (isDefaultAssetIncluded(userAssets, \"SplashScreen.png\")) {\n    return '<uap:SplashScreen Image=\"assets\\\\SplashScreen.png\" />'\n  }\n  else {\n    return \"\"\n  }\n}\n\nfunction isDefaultAssetIncluded(userAssets: Array<string>, defaultAsset: string) {\n  const defaultAssetName = defaultAsset.substring(0, defaultAsset.indexOf(\".\"))\n  return userAssets.some(it => it.includes(defaultAssetName))\n}\n\nfunction isScaledAssetsProvided(userAssets: Array<string>) {\n  return userAssets.some(it => it.includes(\".scale-\") || it.includes(\".targetsize-\"))\n}\n"],"sourceRoot":""}
