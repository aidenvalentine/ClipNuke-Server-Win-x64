{"version":3,"sources":["../../src/targets/AppImageTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, serializeToYaml } from \"builder-util\"\nimport { outputFile } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { AppImageOptions } from \"..\"\nimport { Target } from \"../core\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { getAppUpdatePublishConfiguration } from \"../publish/PublishManager\"\nimport { executeAppBuilderAsJson, objectToArgs } from \"../util/appBuilder\"\nimport { getNotLocalizedLicenseFile } from \"../util/license\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { createStageDir } from \"./targetUtil\"\n\n// https://unix.stackexchange.com/questions/375191/append-to-sub-directory-inside-squashfs-file\nexport default class AppImageTarget extends Target {\n  readonly options: AppImageOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n  private readonly desktopEntry: Lazy<string>\n\n  constructor(ignored: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(\"appImage\")\n\n    // we add X-AppImage-BuildId to ensure that new desktop file will be installed\n    this.desktopEntry = new Lazy<string>(() => helper.computeDesktopEntry(this.options, \"AppRun\", {\n      \"X-AppImage-Version\": `${packager.appInfo.buildVersion}`,\n    }))\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n    const options = this.options\n    // https://github.com/electron-userland/electron-builder/issues/775\n    // https://github.com/electron-userland/electron-builder/issues/1726\n    // tslint:disable-next-line:no-invalid-template-strings\n    const artifactName = packager.expandArtifactBeautyNamePattern(options, \"AppImage\", arch)\n    const artifactPath = path.join(this.outDir, artifactName)\n    await packager.info.callArtifactBuildStarted({\n      targetPresentableName: \"AppImage\",\n      file: artifactPath,\n      arch,\n    })\n\n    const c = await Promise.all([\n      this.desktopEntry.value,\n      this.helper.icons,\n      getAppUpdatePublishConfiguration(packager, arch, false /* in any case validation will be done on publish */),\n      getNotLocalizedLicenseFile(options.license, this.packager, [\"txt\", \"html\"]),\n      createStageDir(this, packager, arch),\n    ])\n    const license = c[3]\n    const stageDir = c[4]\n\n    const publishConfig = c[2]\n    if (publishConfig != null) {\n      await outputFile(path.join(packager.getResourcesDir(stageDir.dir), \"app-update.yml\"), serializeToYaml(publishConfig))\n    }\n\n    if (this.packager.packagerOptions.effectiveOptionComputed != null && await this.packager.packagerOptions.effectiveOptionComputed({desktop: await this.desktopEntry.value})) {\n      return\n    }\n\n    const args = [\n      \"appimage\",\n      \"--stage\", stageDir.dir,\n      \"--arch\", Arch[arch],\n      \"--output\", artifactPath,\n      \"--app\", appOutDir,\n      \"--configuration\", (JSON.stringify({\n        productName: this.packager.appInfo.productName,\n        desktopEntry: c[0],\n        executableName: this.packager.executableName,\n        icons: c[1],\n        fileAssociations: this.packager.fileAssociations,\n        ...options,\n      })),\n    ]\n    objectToArgs(args, {\n      license,\n    })\n    if (packager.compression === \"maximum\") {\n      args.push(\"--compression\", \"xz\")\n    }\n\n    await packager.info.callArtifactBuildCompleted({\n      file: artifactPath,\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"AppImage\", arch, false),\n      target: this,\n      arch,\n      packager,\n      isWriteUpdateInfo: true,\n      updateInfo: await executeAppBuilderAsJson(args),\n    })\n  }\n}"],"sourceRoot":""}
