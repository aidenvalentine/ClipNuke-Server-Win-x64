{"version":3,"sources":["../../src/electron/ElectronFramework.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, executeAppBuilder, log } from \"builder-util\"\nimport { CONCURRENCY, copyDir, DO_NOT_USE_HARD_LINKS, statOrNull, unlinkIfExists } from \"builder-util/out/fs\"\nimport { emptyDir, readdir, remove, rename } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport * as semver from \"semver\"\nimport { Configuration } from \"../configuration\"\nimport { BeforeCopyExtraFilesOptions, Framework, PrepareApplicationStageDirectoryOptions } from \"../Framework\"\nimport { ElectronPlatformName, Packager, Platform } from \"../index\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport MacPackager from \"../macPackager\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { createMacApp } from \"./electronMac\"\nimport { computeElectronVersion, getElectronVersionFromInstalled } from \"./electronVersion\"\n\nexport type ElectronPlatformName = \"darwin\" | \"linux\" | \"win32\" | \"mas\"\n\nexport interface ElectronDownloadOptions {\n  // https://github.com/electron-userland/electron-builder/issues/3077\n  // must be optional\n  version?: string\n\n  /**\n   * The [cache location](https://github.com/electron-userland/electron-download#cache-location).\n   */\n  cache?: string | null\n\n  /**\n   * The mirror.\n   */\n  mirror?: string | null\n\n  /** @private */\n  customDir?: string | null\n  /** @private */\n  customFilename?: string | null\n\n  strictSSL?: boolean\n  isVerifyChecksum?: boolean\n\n  platform?: ElectronPlatformName\n  arch?: string\n}\n\nfunction createDownloadOpts(opts: Configuration, platform: ElectronPlatformName, arch: string, electronVersion: string): ElectronDownloadOptions {\n  return {\n    platform,\n    arch,\n    version: electronVersion,\n    ...opts.electronDownload,\n  }\n}\n\nasync function beforeCopyExtraFiles(options: BeforeCopyExtraFilesOptions, isClearExecStack: boolean) {\n  const packager = options.packager\n  const appOutDir = options.appOutDir\n  if (packager.platform === Platform.LINUX) {\n    const linuxPackager = (packager as LinuxPackager)\n    const executable = path.join(appOutDir, linuxPackager.executableName)\n    await rename(path.join(appOutDir, packager.electronDistExecutableName), executable)\n\n    if (isClearExecStack) {\n      try {\n        await executeAppBuilder([\"clear-exec-stack\", \"--input\", executable])\n      }\n      catch (e) {\n        log.debug({error: e}, \"cannot clear exec stack\")\n      }\n    }\n  }\n  else if (packager.platform === Platform.WINDOWS) {\n    const executable = path.join(appOutDir, `${packager.appInfo.productFilename}.exe`)\n    await rename(path.join(appOutDir, `${packager.electronDistExecutableName}.exe`), executable)\n  }\n  else {\n    await createMacApp(packager as MacPackager, appOutDir, options.asarIntegrity, (options.platformName as ElectronPlatformName) === \"mas\")\n\n    const wantedLanguages = asArray(packager.platformSpecificBuildOptions.electronLanguages)\n    if (wantedLanguages.length === 0) {\n      return\n    }\n\n    // noinspection SpellCheckingInspection\n    const langFileExt = \".lproj\"\n    const resourcesDir = packager.getResourcesDir(appOutDir)\n    await BluebirdPromise.map(readdir(resourcesDir), file => {\n      if (!file.endsWith(langFileExt)) {\n        return\n      }\n\n      const language = file.substring(0, file.length - langFileExt.length)\n      if (!wantedLanguages.includes(language)) {\n        return remove(path.join(resourcesDir, file))\n      }\n      return\n    }, CONCURRENCY)\n  }\n}\n\nclass ElectronFramework implements Framework {\n  // noinspection JSUnusedGlobalSymbols\n  readonly macOsDefaultTargets = [\"zip\", \"dmg\"]\n  // noinspection JSUnusedGlobalSymbols\n  readonly defaultAppIdPrefix = \"com.electron.\"\n  // noinspection JSUnusedGlobalSymbols\n  readonly isCopyElevateHelper = true\n  // noinspection JSUnusedGlobalSymbols\n  readonly isNpmRebuildRequired = true\n\n  constructor(readonly name: string, readonly version: string, readonly distMacOsAppName: string) {\n  }\n\n  getDefaultIcon(platform: Platform) {\n    if (platform === Platform.LINUX) {\n      return path.join(getTemplatePath(\"icons\"), \"electron-linux\")\n    }\n    else {\n      // default icon is embedded into app skeleton\n      return null\n    }\n  }\n\n  prepareApplicationStageDirectory(options: PrepareApplicationStageDirectoryOptions) {\n    return unpack(options, createDownloadOpts(options.packager.config, options.platformName, options.arch, this.version), this.distMacOsAppName)\n  }\n\n  beforeCopyExtraFiles(options: BeforeCopyExtraFilesOptions) {\n    return beforeCopyExtraFiles(options, this.name === \"electron\" && semver.lte(this.version || \"1.8.3\", \"1.8.3\"))\n  }\n}\n\nclass MuonFramework extends ElectronFramework {\n  constructor(version: string) {\n    super(\"muon\", version, \"Brave.app\")\n  }\n\n  prepareApplicationStageDirectory(options: PrepareApplicationStageDirectoryOptions) {\n    return unpack(options, {\n      mirror: \"https://github.com/brave/muon/releases/download/v\",\n      customFilename: `brave-v${options.version}-${options.platformName}-${options.arch}.zip`,\n      isVerifyChecksum: false,\n      ...createDownloadOpts(options.packager.config, options.platformName, options.arch, options.version),\n    }, this.distMacOsAppName)\n  }\n}\n\nexport async function createElectronFrameworkSupport(configuration: Configuration, packager: Packager): Promise<Framework> {\n  if (configuration.muonVersion != null) {\n    return new MuonFramework(configuration.muonVersion!!)\n  }\n\n  let version = configuration.electronVersion\n  if (version == null) {\n    // for prepacked app asar no dev deps in the app.asar\n    if (packager.isPrepackedAppAsar) {\n      version = await getElectronVersionFromInstalled(packager.projectDir)\n      if (version == null) {\n        throw new Error(`Cannot compute electron version for prepacked asar`)\n      }\n    }\n    else {\n      version = await computeElectronVersion(packager.projectDir, new Lazy(() => Promise.resolve(packager.metadata)))\n    }\n    configuration.electronVersion = version\n  }\n\n  return new ElectronFramework(\"electron\", version, \"Electron.app\")\n}\n\nasync function unpack(prepareOptions: PrepareApplicationStageDirectoryOptions, options: ElectronDownloadOptions, distMacOsAppName: string) {\n  const packager = prepareOptions.packager\n  const out = prepareOptions.appOutDir\n\n  let dist: string | null | undefined = packager.config.electronDist\n  if (dist != null) {\n    const zipFile = `electron-v${options.version}-${prepareOptions.platformName}-${options.arch}.zip`\n    const resolvedDist = path.resolve(packager.projectDir, dist)\n    if ((await statOrNull(path.join(resolvedDist, zipFile))) != null) {\n      options.cache = resolvedDist\n      dist = null\n    }\n  }\n\n  let isFullCleanup = false\n  if (dist == null) {\n    await executeAppBuilder([\"unpack-electron\", \"--configuration\", JSON.stringify([options]), \"--output\", out, \"--distMacOsAppName\", distMacOsAppName])\n  }\n  else {\n    isFullCleanup = true\n    const source = packager.getElectronSrcDir(dist)\n    const destination = packager.getElectronDestinationDir(out)\n    log.info({source, destination}, \"copying Electron\")\n    await emptyDir(out)\n    await copyDir(source, destination, {\n      isUseHardLink: DO_NOT_USE_HARD_LINKS,\n    })\n  }\n\n  await cleanupAfterUnpack(prepareOptions, distMacOsAppName, isFullCleanup)\n}\n\nfunction cleanupAfterUnpack(prepareOptions: PrepareApplicationStageDirectoryOptions, distMacOsAppName: string, isFullCleanup: boolean) {\n  const out = prepareOptions.appOutDir\n  const isMac = prepareOptions.packager.platform === Platform.MAC\n  const resourcesPath = isMac ? path.join(out, distMacOsAppName, \"Contents\", \"Resources\") : path.join(out, \"resources\")\n\n  return Promise.all([\n    isFullCleanup ? unlinkIfExists(path.join(resourcesPath, \"default_app.asar\")) : Promise.resolve(),\n    isFullCleanup ? unlinkIfExists(path.join(out, \"version\")) : Promise.resolve(),\n    isMac ? Promise.resolve() : rename(path.join(out, \"LICENSE\"), path.join(out, \"LICENSE.electron.txt\")).catch(() => {/* ignore */}),\n  ])\n}"],"sourceRoot":""}
