{"remainingRequest":"/Users/tim/repos/electron-preferences/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/tim/repos/electron-preferences/src/app/components/main/components/group/components/fields/color/index.js","dependencies":[{"path":"/Users/tim/repos/electron-preferences/src/app/components/main/components/group/components/fields/color/index.js","mtime":1525791096198},{"path":"/Users/tim/repos/electron-preferences/node_modules/cache-loader/dist/cjs.js","mtime":1525279418314},{"path":"/Users/tim/repos/electron-preferences/node_modules/babel-loader/lib/index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nrequire('./style.scss');\n\nvar _reactColor = require('react-color');\n\nvar _reactDom = require('react-dom');\n\nvar ReactDOM = _interopRequireWildcard(_reactDom);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ColorField = function (_React$Component) {\n    _inherits(ColorField, _React$Component);\n\n    function ColorField() {\n        var _ref;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, ColorField);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ColorField.__proto__ || Object.getPrototypeOf(ColorField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n            displayColorPicker: false\n        }, _this.handleClick = function () {\n            _this.setState({ displayColorPicker: !_this.state.displayColorPicker });\n        }, _this.handleClose = function () {\n            _this.setState({ displayColorPicker: false });\n        }, _this.handleClickOutside = function (event) {\n            var domNode = ReactDOM.findDOMNode(_this);\n\n            if (!domNode || !domNode.contains(event.target)) {\n                _this.handleClose();\n            }\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(ColorField, [{\n        key: 'render',\n        value: function render() {\n\n            return _react2.default.createElement(\n                'div',\n                { className: 'field field-color' },\n                _react2.default.createElement(\n                    'div',\n                    { className: 'field-label' },\n                    this.label\n                ),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'color-swatch', onClick: this.handleClick },\n                    _react2.default.createElement('div', { className: 'color', style: this.style })\n                ),\n                this.state.displayColorPicker ? _react2.default.createElement(\n                    'div',\n                    { className: 'color-popover' },\n                    _react2.default.createElement(_reactColor.ChromePicker, { color: this.value, onChange: this.onChange.bind(this), disableAlpha: this.format === \"hex\" })\n                ) : null\n            );\n        }\n    }, {\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            document.addEventListener('click', this.handleClickOutside, true);\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            document.removeEventListener('click', this.handleClickOutside, true);\n        }\n    }, {\n        key: 'onChange',\n        value: function onChange(color) {\n\n            if (this.format === \"rgb\") {\n                color = color.rgb;\n            } else if (this.format === \"hex\") {\n                color = color.hex;\n            } else if (this.format === \"hsl\") {\n                color = color.hsl;\n            }\n\n            return this.props.onChange(color);\n        }\n    }, {\n        key: 'field',\n        get: function get() {\n\n            return this.props.field;\n        }\n    }, {\n        key: 'value',\n        get: function get() {\n\n            return this.props.value || '#fff';\n        }\n    }, {\n        key: 'label',\n        get: function get() {\n\n            return this.field.label;\n        }\n    }, {\n        key: 'help',\n        get: function get() {\n\n            return this.field.help;\n        }\n    }, {\n        key: 'format',\n        get: function get() {\n\n            return this.field.format;\n        }\n    }, {\n        key: 'style',\n        get: function get() {\n\n            var style = \"\";\n            if (this.format === \"rgb\") {\n                style = 'rgba(' + this.value.r + ', ' + this.value.g + ', ' + this.value.b + ', ' + this.value.a + ')';\n            } else if (this.format === \"hex\") {\n                style = this.value;\n            } else if (this.format === \"hsl\") {\n                style = 'hsla(' + this.value.h + ', ' + this.value.s * 100 + '%, ' + this.value.l * 100 + '%, ' + this.value.a + ')';\n            } else if (this.value.hex) {\n                style = this.value.hex;\n            }\n            return { background: style };\n        }\n    }]);\n\n    return ColorField;\n}(_react2.default.Component);\n\nexports.default = ColorField;",null]}