{"remainingRequest":"/Users/tkambler/repos/electron-preferences/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/tkambler/repos/electron-preferences/src/app/components/main/components/group/components/fields/list/index.js","dependencies":[{"path":"/Users/tkambler/repos/electron-preferences/src/app/components/main/components/group/components/fields/list/index.js","mtime":1536900530648},{"path":"/Users/tkambler/repos/electron-preferences/node_modules/cache-loader/dist/cjs.js","mtime":1525279418000},{"path":"/Users/tkambler/repos/electron-preferences/node_modules/babel-loader/lib/index.js","mtime":1520329890000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactModal = require('react-modal');\n\nvar _reactModal2 = _interopRequireDefault(_reactModal);\n\nrequire('./style.scss');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ListField = function (_React$Component) {\n  _inherits(ListField, _React$Component);\n\n  function ListField() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ListField);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ListField.__proto__ || Object.getPrototypeOf(ListField)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      showInputModal: false,\n      itemToAdd: '',\n      selectedIndex: 0\n    }, _this.selectItem = function (e) {\n      _this.setState({ selectedIndex: e.target.selectedIndex });\n    }, _this.itemToAddChanged = function (e) {\n      _this.setState({ itemToAdd: e.target.value });\n    }, _this.addClick = function () {\n      _this.setState({ showInputModal: true });\n    }, _this.cancelAdd = function () {\n      _this.setState({ showInputModal: false, itemToAdd: '' });\n    }, _this.saveItem = function () {\n      if (_this.state.itemToAdd !== undefined && _this.state.itemToAdd !== null && _this.state.itemToAdd !== '') {\n        _this.props.onChange([].concat(_toConsumableArray(_this.value), [_this.state.itemToAdd]));\n      }\n      _this.setState({ showInputModal: false, itemToAdd: '' });\n    }, _this.removeClick = function () {\n      if (_this.state.selectedIndex >= 0) {\n        _this.props.onChange(_this.value.filter(function (item, index) {\n          return index !== _this.state.selectedIndex;\n        }));\n      }\n    }, _this.upClick = function () {\n      var selectedIndex = _this.state.selectedIndex;\n\n      if (selectedIndex >= 1) {\n        var newIndex = selectedIndex - 1;\n        _this.props.onChange([].concat(_toConsumableArray(_this.value.slice(0, newIndex)), [_this.value[selectedIndex], _this.value[newIndex]], _toConsumableArray(_this.value.slice(selectedIndex + 1))));\n        _this.setState({ selectedIndex: _this.state.selectedIndex - 1 });\n      }\n    }, _this.downClick = function () {\n      var selectedIndex = _this.state.selectedIndex;\n\n      if (selectedIndex <= _this.value.length - 2) {\n        var newIndex = selectedIndex + 1;\n        _this.props.onChange([].concat(_toConsumableArray(_this.value.slice(0, selectedIndex)), [_this.value[newIndex], _this.value[selectedIndex]], _toConsumableArray(_this.value.slice(newIndex + 1))));\n        _this.setState({ selectedIndex: _this.state.selectedIndex + 1 });\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ListField, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return _react2.default.createElement(\n        'div',\n        { className: 'field field-list' },\n        _react2.default.createElement(\n          'div',\n          { className: 'field-label' },\n          this.label\n        ),\n        _react2.default.createElement(\n          'div',\n          null,\n          _react2.default.createElement(\n            'div',\n            null,\n            _react2.default.createElement(\n              'select',\n              { style: this.style, className: 'ep-list', size: this.size, onChange: this.selectItem.bind(this) },\n              this.value.map(function (item, index) {\n                if (index === _this2.state.selectedIndex) {\n                  return _react2.default.createElement(\n                    'option',\n                    { selected: true, value: item },\n                    item\n                  );\n                } else {\n                  return _react2.default.createElement(\n                    'option',\n                    { value: item },\n                    item\n                  );\n                }\n              })\n            )\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: {\n                'marginTop': '10px'\n              } },\n            _react2.default.createElement(\n              'span',\n              { className: 'ep-list-button-first', onClick: this.addClick },\n              _react2.default.createElement(\n                'span',\n                { className: 'ep-list-button-text' },\n                '+'\n              )\n            ),\n            _react2.default.createElement(\n              'span',\n              { className: 'ep-list-button', onClick: this.removeClick },\n              _react2.default.createElement(\n                'span',\n                { className: 'ep-list-button-text' },\n                '-'\n              )\n            ),\n            this.orderable && _react2.default.createElement(\n              _react2.default.Fragment,\n              null,\n              _react2.default.createElement(\n                'span',\n                { className: 'ep-list-button', onClick: this.upClick },\n                _react2.default.createElement(\n                  'span',\n                  { className: 'ep-list-button-text' },\n                  '\\u2191'\n                )\n              ),\n              _react2.default.createElement(\n                'span',\n                { className: 'ep-list-button', onClick: this.downClick },\n                _react2.default.createElement(\n                  'span',\n                  { className: 'ep-list-button-text' },\n                  '\\u2193'\n                )\n              )\n            )\n          ),\n          _react2.default.createElement(\n            _reactModal2.default,\n            { style: this.modalStyle, shouldCloseOnOverlayClick: true, isOpen: this.state.showInputModal, contentLabel: 'Add Item', closeTimeoutMS: this.modalCloseTimeoutMS },\n            _react2.default.createElement(\n              'div',\n              { className: 'ep-list-modal-container' },\n              _react2.default.createElement(\n                'div',\n                { className: 'ep-list-modal-input-container' },\n                _react2.default.createElement(\n                  'label',\n                  { className: 'ep-list-modal-input-label' },\n                  this.addItemLabel\n                ),\n                _react2.default.createElement('input', { className: 'ep-list-modal-input', type: 'text', value: this.state.itemToAdd, onChange: this.itemToAddChanged,\n                  style: {\n                    'width': '100%'\n                  }\n                })\n              ),\n              _react2.default.createElement(\n                'div',\n                { className: 'ep-list-modal-button-container' },\n                _react2.default.createElement(\n                  'button',\n                  { className: 'ep-list-modal-button', onClick: this.cancelAdd.bind(this) },\n                  'Cancel'\n                ),\n                this.addItemValidator.test(this.state.itemToAdd) && _react2.default.createElement(\n                  'button',\n                  { className: 'ep-list-modal-button', onClick: this.saveItem.bind(this) },\n                  'Save'\n                ) || _react2.default.createElement(\n                  'button',\n                  { className: 'ep-list-modal-button', disabled: 'disabled' },\n                  'Save'\n                )\n              )\n            )\n          )\n        ),\n        this.help && _react2.default.createElement(\n          'span',\n          { className: 'help' },\n          this.help\n        )\n      );\n    }\n  }, {\n    key: 'field',\n    get: function get() {\n      return this.props.field;\n    }\n  }, {\n    key: 'value',\n    get: function get() {\n      return this.props.value || [];\n    }\n  }, {\n    key: 'label',\n    get: function get() {\n      return this.field.label;\n    }\n  }, {\n    key: 'inputType',\n    get: function get() {\n      return this.field.inputType || \"list\";\n    }\n  }, {\n    key: 'orderable',\n    get: function get() {\n      return this.field.orderable || false;\n    }\n  }, {\n    key: 'size',\n    get: function get() {\n      return this.field.size || 10;\n    }\n  }, {\n    key: 'help',\n    get: function get() {\n      return this.field.help;\n    }\n  }, {\n    key: 'style',\n    get: function get() {\n      return this.field.style || {};\n    }\n  }, {\n    key: 'modalStyle',\n    get: function get() {\n      return this.field.modalStyle || {\n        'overlay': {\n          'backgroundColor': 'rgba(0, 0, 0, 0.5)'\n        },\n        'content': {\n          'top': '50%',\n          'left': '50%',\n          'bottom': 'auto',\n          'right': 'auto',\n          'marginRight': '-50%',\n          'transform': 'translate(-50%, -50%)',\n          'width': '300px'\n        }\n      };\n    }\n  }, {\n    key: 'modalCloseTimeoutMS',\n    get: function get() {\n      return this.field.modalCloseTimeoutMS || 100;\n    }\n  }, {\n    key: 'addItemLabel',\n    get: function get() {\n      return this.field.addItemLabel || 'Add Item';\n    }\n  }, {\n    key: 'addItemValidator',\n    get: function get() {\n      if (this.field.addItemValidator) {\n        var str = this.field.addItemValidator;\n        var lastSlash = str.lastIndexOf('/');\n        var validator = new RegExp(str.slice(1, lastSlash), str.slice(lastSlash + 1));\n        return validator;\n      }\n      return (/.+/\n      );\n    }\n  }]);\n\n  return ListField;\n}(_react2.default.Component);\n\nexports.default = ListField;",null]}